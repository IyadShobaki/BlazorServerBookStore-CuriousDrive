@page "/publishers"
@inject IAuthorService authorService
@inject IPublisherService publisherService;
@inject IJSRuntime JSRuntime

    <div class="col-12">
        <h3><b>Enter Publisher Information</b></h3>
        <hr />

        @*<div id="divServerValidations" class="col-10 alert alert-info">

        </div>*@
        <ServerValidations IsVisible="IsVisible" Results="Results">
            <span>Publisher :</span>@RecordName
        </ServerValidations>

        <EditForm Model="@publisher" OnValidSubmit="@SavePublisher">
            @*<DataAnnotationsValidator />*@
            <div class="col-12 row">
                <label class="col-2 font-weight-bold">first name :</label>
                <input @ref="publisherNameText" class="form-control col-3" @bind="publisher.PublisherName" placeholder="Publisher name" />
                &nbsp;<ValidationMessage For="@(() => publisher.PublisherName)" />
            </div>
            <div class="col-12 row">
                <label class="col-2 font-weight-bold">city :</label>
                <InputSelect @bind-Value="publisher.City" class="form-control col-3">
                    @if (Cities != null)
                    {
                        foreach (var city in Cities)
                        {
                            <option value="@city">@city</option>
                        }
                    }

                </InputSelect>
                @*<InputText class="form-control col-3" @bind-Value="publisher.City" placeholder="city" />
                &nbsp;<ValidationMessage For="@(() => publisher.City)" />*@
            </div>
            <br />
            <div class="col-12 row">
                <span class="col-2"></span>
                <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
                <span>&nbsp;</span>
                <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
            </div>
        </EditForm>
    </div>

<br />

<div class="col-10">

    <h3>Publishers</h3>

    <table class="table">
        <thead>
            <tr>
                <th>PublisherId</th>
                <th>Publisher Name</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Publisher publisher in PublisherList)
            {
                <tr>
                    <td>@publisher.PublisherId</td>
                    <td>@publisher.PublisherName</td>
                    <td>@publisher.City</td>
                </tr>

            }
        </tbody>
    </table>
</div>

<hr />

<div class="col-12 row">@authorService.GetCreatedDate()</div>
<div class="col-12 row">version : @authorService.GetVersion()</div>

@code {

    public Publisher publisher { get; set; }
    public List<Publisher> PublisherList { get; set; }

    public string[] Cities { get; set; }

    ElementReference publisherNameText;

    public bool IsVisible { get; set; }
    public string RecordName { get; set; }
    public bool Results { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Cities == null)
        {
            Cities = await JSRuntime.InvokeAsync<string[]>("getCities");

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        publisher = new Publisher();
        PublisherList = publisherService.GetPublishers();
    }

    private async Task SavePublisher()
    {
        Results = publisherService.SavePublisher(publisher);
        IsVisible = true;
        //var publisherName = publisher.PublisherName;
        RecordName = publisher.PublisherName;
        publisher = new Publisher();

        //await JSRuntime.InvokeVoidAsync("saveMessage", publisherName, "");
        await JSRuntime.InvokeVoidAsync("setFocusOnElement", publisherNameText);
    }

    private async Task DeletePublisher(string publisherId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirmDelete");

        if (confirm)
        {
            publisherService.DeletePublisher(publisherId);
        }
    }
}
